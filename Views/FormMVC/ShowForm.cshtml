@model List<USSMVC48.Models.Question>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    int responseIndex = 0;
}

@{
    if (TempData["SuccessMessage"] != null)
    {
        <script type="text/javascript">
            alert('@TempData["SuccessMessage"].ToString()');
        </script>
    }
}

<style>
    .hidden {
        display: none;
    }
</style>

<h2>@ViewBag.Title</h2>
<h2>全國農業金庫民國@(DateTime.Now.Year - 1911)年度顧客滿意度問卷調查表</h2>
<p>
    親愛的顧客 您好：<br />
    感謝您的支持與愛護，誠摯邀請您填寫顧客滿意度問卷，填答時間只需要3分鐘，您的寶貴意見將是我們持續進步的動力，感謝您的回饋。<br />
    「本問卷僅作為市場分析和提高服務水準之用，分析和提高服務水準之用，個別資料將會嚴格保密」。
</p>

@using (Html.BeginForm("SubmitForm", "FormMVC", FormMethod.Post, new { onsubmit = "return validateForm();" }))
{
    <input type="hidden" name="FormID" value="@ViewBag.FormID" />

    for (int i = 0; i < Model.Count; i++)
    {
        <div id="question_@Model[i].QuestionID" class="question pt-2">
            <span>@Model[i].QuestionID</span>
            <span>@Model[i].Text</span>
            <input type="hidden" name="@($"Questions[{i}].QuestionId")" value="@Model[i].QuestionID" />

            @if (Model[i].Options.Any(o => o.Type == "select"))
            {
                <div>
                    <select name="@($"Questions[{i}].SelectedOptionId")">
                        <option value="" selected>--- 請選擇 ---</option>
                        @foreach (var option in Model[i].Options.Where(o => o.Type == "select"))
                        {
                            <option value="@option.OptionID">@option.Text</option>
                        }
                    </select>
                </div>
            }
            else
            {
                foreach (var option in Model[i].Options)
                {
                    if (Model[i].IsMultipleChoice)
                    {
                        <div>
                            <input type="checkbox" name="@($"Questions[{i}].SelectedOptionId")" value="@option.OptionID" /> @option.Text
                        </div>
                    }
                    else if (option.Type == "radio")
                    {
                        <div>
                            <input type="radio"
                                   name="@($"Questions[{i}].SelectedOptionId")"
                                   value="@option.OptionID"
                                   data-skip-to="@option.SkipToQuestionID"
                                   onchange="handleSkip(this)" /> @option.Text
                        </div>
                    }
                    else if (option.Type == "text")
                    {
                        <div>
                            <label>@option.Text</label>
                            <input type="text" name="@($"Questions[{i}].AdditionalText")" />
                        </div>
                    }
                }
            }

        </div>
    }

    <input type="submit" value="送出" class="mt-2" />
}

<script>

    function validateForm() {
        let unfilledQuestions = [];
        let questions = document.querySelectorAll('.question');

        questions.forEach(function (question) {
            // Only validate questions that are not skipped
            if (!question.classList.contains('hidden')) {
                let inputs = question.querySelectorAll('input[type="checkbox"], input[type="radio"], input[type="text"], select');
                let filled = Array.from(inputs).some(input => {
                    if (input.type === 'checkbox' || input.type === 'radio') {
                        return input.checked;
                    } else {
                        return input.value.trim() !== '';
                    }
                });

                if (!filled) {
                    unfilledQuestions.push(question.id.split('_')[1]);
                }
            }
        });

        if (unfilledQuestions.length > 0) {
            alert("請完成以下問題: " + unfilledQuestions.join(", "));
            return false;
        }

        return true;
    }


    let questionDependencies = {}; // Maps each question to the ID of the question it should skip to
    let skippedQuestions = {}; // Tracks the state of each question

    function handleSkip(selectedOption) {
        let match = selectedOption.name.match(/\[(\d+)\]/);
        let selectedQuestionID = match ? parseInt(match[1]) : null;
        let skipToQuestionID = selectedOption.getAttribute('data-skip-to')
            ? parseInt(selectedOption.getAttribute('data-skip-to'))
            : null;

        // Update the dependencies based on the current selection
        questionDependencies[selectedQuestionID] = skipToQuestionID;

        applySkipLogic();
    }


    function resetSkippedQuestions(currentID) {
        // Re-enable questions only if they were skipped due to interaction with the current question.
        Object.keys(skippedQuestions).forEach(key => {
            let questionID = parseInt(key);
            // If there is no skipToID, it means we are not skipping any questions, so re-enable them.
            // If questionID is greater than currentID and less than skipToID, it was skipped by the current question.
            if (skippedQuestions[questionID] === currentID) {
                skippedQuestions[questionID] = false;
                showQuestion(document.getElementById('question_' + questionID));
            }
        });
    }

    function hideQuestion(questionDiv) {
        if (questionDiv) {
            questionDiv.classList.add('hidden');
        }
    }

    function showQuestion(questionDiv) {
        if (questionDiv) {
            questionDiv.classList.remove('hidden');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
            handleSkip(input);
        });

        document.querySelectorAll('.question').forEach(question => {
            let questionID = parseInt(question.id.split('_')[1]);
            skippedQuestions[questionID] = false;
        });
    });

    function applySkipLogic() {
        // Initialize all questions as potentially visible
        for (let i = 1; i <= Object.keys(skippedQuestions).length; i++) {
            skippedQuestions[i] = false;
        }

        // Apply hide logic based on current dependencies
        for (let questionID in questionDependencies) {
            let skipToID = questionDependencies[questionID];
            if (skipToID) {
                for (let i = parseInt(questionID) + 1; i < skipToID; i++) {
                    skippedQuestions[i] = true;
                }
            }
        }

        // Update the visibility of each question
        for (let questionID in skippedQuestions) {
            let questionDiv = document.getElementById('question_' + questionID);
            if (skippedQuestions[questionID]) {
                hideQuestion(questionDiv);
            } else {
                showQuestion(questionDiv);
            }
        }

        // Ensure question 1 is always visible
        showQuestion(document.getElementById('question_1'));
        showQuestion(document.getElementById('question_11'));
    }

    function disableInputs(questionDiv) {
        if (questionDiv && !questionDiv.classList.contains('current')) {
            var inputs = questionDiv.querySelectorAll('input, select, textarea');
            inputs.forEach(function (input) {
                input.disabled = true;
            });
        }
    }

    function enableInputs(questionDiv) {
        if (questionDiv) {
            var inputs = questionDiv.querySelectorAll('input, select, textarea');
            inputs.forEach(function (input) {
                input.disabled = false;
            });
        }
    }

    function logFormData() {
        let formData = new FormData(document.querySelector('form'));
        for (let [key, value] of formData.entries()) {
            console.log(key, value);
        }
    }
</script>
